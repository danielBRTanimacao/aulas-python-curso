# Polimorfismo em Python Orientado a Objetos
# Polimorfismo √© o princ√≠pio que permite que
# classes deridavas de uma mesma superclasse
# tenham m√©todos iguais (com mesma assinatura)
# mas comportamentos diferentes.
# Assinatura do m√©todo = Mesmo nome e quantidade
# de par√¢metros (retorno n√£o faz parte da assinatura)
# Opini√£o + princ√≠pios que contam:
# Assinatura do m√©todo: nome, par√¢metros e retorno iguais
# SO"L"ID
# Princ√≠pio da substitui√ß√£o de liskov
# Objetos de uma superclasse devem ser substitu√≠veis
# por objetos de uma subclasse sem quebrar a aplica√ß√£o.
# Sobrecarga de m√©todos (overload)  üêç = ‚ùå
# Sobreposi√ß√£o de m√©todos (override) üêç = ‚úÖ
from abc import ABC, abstractmethod

class Notificacao(ABC):
    def __init__(self, mensagem) -> None:
        self.mensagem = mensagem

    @abstractmethod
    def enviar(self) -> bool: ...


class NotificacaoEmail(Notificacao):
    def enviar(self) -> bool:
        print("E-mail: Enviando...", self.mensagem)
        return True
    

class NotificacaoSms(Notificacao):
    def enviar(self) -> bool:
        print("SMS: Enviando...", self.mensagem)
        return False


def notificar(notificar: Notificacao):
    notificar_enviar = notificar.enviar()

    if notificar_enviar:
        print('A notifica√ß√£o foi enviada')
    else:
        print('A notifica√ß√£o n√£o foi enviada')
    

notificacao_email = NotificacaoEmail('Enviou essa bomba kkk')
notificar(notificacao_email)

notificar(NotificacaoSms('Olha a mensagem kkk'))